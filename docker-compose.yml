version: '3'
services:

    # docker-compose exec database mysql -u wordpress -pwordpress
    # docker-compose exec database mysql -u root -pwordpress
    database:
        build: ./docker/db
        restart: always
        command:
            # - "--character-set-server=utf8"
            # - "--collation-server=utf8_unicode_ci"
            # - "--timezone=JST"
            - "--default-authentication-plugin=mysql_native_password"
        ports:
            - "${LOCAL_DB_PORT}:3306"
        volumes:
            - "db-data:/var/lib/mysql"
            - ./db:/root/db
        container_name: "${PRODUCTION_NAME}_db"
        env_file:
            - ./.env
        environment:
            - TZ=Asia/Tokyo

    # docker-compose exec apache /bin/ash
    apache:
        depends_on:
            - database
        build: ./docker/apache
        container_name: "${PRODUCTION_NAME}_apache"
        volumes:
            - ./public:/var/www/html
            - php_sockert:/var/run
        env_file:
            - ./.env
        # ports:
        #     - "${LOCAL_SERVER_PORT}:80"

    # docker-compose exec php-fpm /bin/ash
    # docker-compose exec php-fpm tail /tmp/xdebug.log
    wp-fpm:
        depends_on:
            - database
        build: ./docker/wp-fpm
        container_name: "${PRODUCTION_NAME}_wp-fpm"
        volumes:
            - ./public:/var/www/html
            - php_sockert:/var/run
        networks:
            - https-support
            - default
        env_file:
            - ./.env

    # wordmove + wp-cli
    # [Dockerを利用したWordPressの開発環境をwp-cliを使ってさくっと構築する](https://qiita.com/izanari/items/73fef6571e7772acb2d7)
    # 起動コマンド : docker-compose run --rm wordmove ash
    wordmove:
        depends_on:
            - database
            - apache
            - wp-fpm
        build: ./docker/wordmove
        container_name: "${PRODUCTION_NAME}_wordmove"
        volumes:
            - ./public:/var/www/html
            - ./db:/root/db
        env_file:
            - ./.env
            - ./secret.env

    # lftp-mirror:
    #     build: ./docker-lftp-cron-sync
    #     container_name: "${PRODUCTION_NAME}_lftp-mirror"
    #     volumes:
    #         - ./public:/var/www/html
    #     env_file:
    #         - ./.env

    # phpMyAdmin on docker が便利すぎる https://qiita.com/furu8ma/items/50718efebee20fd24517
    phpmyadmin:
        depends_on:
            - database
        image: phpmyadmin/phpmyadmin
        container_name: "${PRODUCTION_NAME}_phpmyadmin"
        ports:
            - 8081:80
        tmpfs:
            - /sessions
        env_file:
            - ./.env
        environment:
            PMA_ARBITRARY: 1
            PMA_HOST: "${LOCAL_DB_HOST}"
            # PMA_USER: "${MYSQL_USER}"
            PMA_USER: "root"
            PMA_PASSWORD: "${MYSQL_PASSWORD}"

    # mailcatcher
    # https://hub.docker.com/r/schickling/mailcatcher/
    # https://qiita.com/reflet/items/6e7c8d7850ff9cdb5d92
    # 元のコマンド : docker run -d -p 1080:1080 --name mailcatcher schickling/mailcatcher
    mailcatcher:
        image: schickling/mailcatcher
        container_name: "${PRODUCTION_NAME}_mailcatcher"
        ports:
            - "1080:1080"

    https-portal:
        image: steveltn/https-portal:1
        container_name: "${PRODUCTION_NAME}_https_portal"
        ports:
            # - "${LOCAL_SERVER_PORT}:80"
            - 80:80
            - 443:443
        networks:
            https-support:
                aliases:
                    - "local.${PRODUCTION_NAME}"
            default:
        environment:
            # どのドメインでアクセスされたら、どのdockerコンテナに転送するかを記述します。
            # 左側が実際に公開したいドメイン名。
            # 右側は docker のコンテナ名。https-portal が受け取ったリクエストをこのURLへリダイレクトし、レスポンスをまたsslにして返却してくれるという感じ。
            DOMAINS: "local.${PRODUCTION_NAME} -> http://apache:80"
            # local : 自己証明
            STAGE: local

volumes:
    db-data:
    db-data5:
    php_sockert:

networks:
    # for REST API ( curl https support )
    https-support:
